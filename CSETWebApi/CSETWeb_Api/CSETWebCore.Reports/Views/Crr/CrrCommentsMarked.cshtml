@using System.Text.RegularExpressions
@using CSETWebCore.Model.Maturity 
@model CrrViewModel

@{
    Layout = "_CrrBasicReportBase";
    ViewData["Title"] = "COMMENTS REVIEW REPORT EDM";

    IEnumerable<MatRelevantAnswers> GetMissingParents(List<MatRelevantAnswers> from)
    {
        var parentsPresent = new HashSet<int>();
        var parentsRequired = new HashSet<int>();

        foreach (var matAnswer in from)
        {
            if (matAnswer.Mat.Parent_Question_Id is null)
            {
                parentsPresent.Add(matAnswer.Mat.Mat_Question_Id);
            }
            else
            {
                parentsRequired.Add((int)(matAnswer.Mat.Parent_Question_Id));
            }
        }

        var missingIds = parentsRequired.Except(parentsPresent);
        return Model.ReportData.QuestionsList.Where(q => missingIds.Contains(q.Mat.Mat_Question_Id));
    }

    IEnumerable<MatRelevantAnswers> GetCombinedList(List<MatRelevantAnswers> from)
    {
        return from
            .Concat(GetMissingParents(from))
            .OrderBy(m => m.Mat.Question_Title.Split('-')[0])
            .ThenBy(m => m.Mat.Question_Text);
    }
}

@section Summary {
    <p>
        PLACEHOLDER TEXT
    </p>
    <p>
        We should add a summary here, to match the format of other reports.
    </p>
}

@section Content {
    <div class="row justify-content-between border-2 border-dark border-bottom page-break">
        <div class="col text-start">
            <h2>Practices Marked for Review</h2>
        </div>
        <div class="col text-end">
            <p>
                Marked for Review - <img class="MarkedFlag"
                                         src="@TempData["Links"]/images/icons/MarkedFlag.png"
                                         alt="marked for review">
            </p>
        </div>
    </div>
    @{
        if (Model.ReportData.MarkedForReviewList.Count == 0)
        {
            <div class="row">
                <div class="col text-start">
                    <h3>There are no practices marked for review.</h3>
                </div>
            </div>
        }
        else
        {
            ViewData["head-only"] = true;            
            foreach (var marked in GetCombinedList(Model.ReportData.MarkedForReviewList))
            {
                await Html.RenderPartialAsync("_MatRelevantAnswerHead", marked, ViewData);
            }
        }
    }
    <div class="row justify-content-between border-2 border-dark border-bottom page-break">
        <div class="col text-start">
            <h2>Practice Comments</h2>
        </div>
        <div class="col text-end">
            <p>
                Marked for Review - <img class="MarkedFlag"
                                         src="@TempData["Links"]/images/icons/MarkedFlag.png"
                                         alt="marked for review">
            </p>
        </div>
    </div>
    @{
        if (Model.ReportData.Comments.Count == 0)
        {
            <div class="row">
                <div class="col text-start">
                    <h3>There are no comments on practices.</h3>
                </div>
            </div>
        }
        else
        {
            foreach (var commented in GetCombinedList(Model.ReportData.Comments))
            {
                // this line is necessary because the combined list included non-commented mats
                if (string.IsNullOrEmpty(commented.ANSWER.Comment))
                {
                    ViewData["head-only"] = true;
                    await Html.RenderPartialAsync("_MatRelevantAnswerHead", commented, ViewData);
                }
                else
                {
                    ViewData.Remove("head-only"); //TODO: If I get time, clean this interface up
                    await Html.RenderPartialAsync("_MatRelevantAnswerFull", commented, ViewData);
                }
            }
        }
    }
}