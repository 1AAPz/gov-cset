@using CSETWebCore.Helpers.ReportWidgets;
@using CSETWebCore.Reports.Helper;
@using System.Xml.Linq;
@model CrrViewModel

<link rel="stylesheet" href="@(TempData["links"]+"/lib/bootstrap/css/bootstrap.min.css")" />
<link rel="stylesheet" href="@(TempData["links"]+"/css/site.css")" />

@{
    string AnswerLabel(string ans)
    {
        switch (ans)
        {
            case "N":
                return "No";
            case "Y":
                return "Yes";
            case "I":
                return "Incomplete";
            case "U":
            case "":
                return "Unanswered";
        }

        return ans;
    }

    string AnswerCellClass(XElement q)
    {
        var answer = q.Attribute("answer").Value;

        switch (answer)
        {
            case "Y":
                return WidgetResources.ColorMap["green"];
            case "I":
                return WidgetResources.ColorMap["yellow"];
            case "N":
                return WidgetResources.ColorMap["red"];
            case "U":
                return WidgetResources.ColorMap["unanswered-gray"];
        }

        return WidgetResources.ColorMap["placeholder-gray"];
    }


    string GetQuestionNumber(XElement question)
    {
        var text = question.Attribute("questiontext").Value.Trim();
        int dot = text.IndexOf(".");
        if (dot < 0)
        {
            return "Q";
        }
        return "Q" + text.Substring(0, dot);
    }


    string GetDomainRemark(XElement domain)
    {
        var remark = domain.Attribute("remark");
        if (remark == null)
        {
            return "No remarks have been entered";
        }

        if (remark.Value.Trim().Length > 0)
        {
            return remark.Value;            /// TODO:  FORMAT LINEBREAKS
        }

        return "No remarks have been entered";
    }


    /// Returns the questions that are not child questions
    List<XElement> ParentQuestions(IEnumerable<XElement> q)
    {
        var questions = new List<XElement>();
        questions.AddRange(q.Where(x => x.Attribute("parentquestionid").Value == "").ToList());

        return questions;
    }

}

<div style="width: 100%">


    @{

        var xDoc = Model.CRRScores.XDoc;

        foreach (XElement domain in xDoc.Root.Elements())
        {
            <h3 style="text-align: center" class="page-break">
                @domain.Attribute("title").Value
            </h3>

            <div style="display: flex;">
                @{
                    foreach (XElement mil in domain.Elements())
                    {
                        var milSvg = new MilHeatMap(mil, true, false);
                        @Html.Raw(milSvg.ToString())
                    }
                }
            </div>
            <table class="w-100 cset-table">
                @foreach (XElement goal in domain.Descendants("Goal"))
                {


                    <tbody>
                        <tr>
                            <td colspan="3">
                                <div class="font-weight-bold mb-3">
                                    @goal.Attribute("title").Value
                                </div>
                                <div>
                                    @goal.Attribute("description")?.Value
                                </div>
                            </td>
                        </tr>

                        @foreach (XElement question in goal.Elements())
                        {
                            @if (question.Attribute("placeholder-p")?.Value == "true")
                            {
                                continue;
                            }
                            <tr>
                                <td colspan="2" class="font-weight-bold">
                                    @Html.Raw(question.Attribute("questiontext")?.Value)
                                </td>
                                @if (question.Attribute("isparentquestion").Value == "false")
                                {
                                    <td style="background-color: @AnswerCellClass(question);">
                                        <div class="text-center font-weight-bold" style="text-align: center; width: 7rem">
                                            @AnswerLabel(question.Attribute("answer").Value)
                                        </div>
                                    </td>
                                }
                                @if (question.Attribute("isparentquestion").Value == "true")
                                {
                                    <td>
                                        <div style="width: 7rem"></div>
                                    </td>
                                }
                            </tr>
                        }

                        <tr>
                            <td colspan="3" class="font-weight-bold">Option(s) for Consideration</td>
                        </tr>
                        @foreach (XElement question in ParentQuestions(goal.Elements("Question")))
                        {
                            <tr>
                                <td> @Html.Raw(GetQuestionNumber(question))</td>
                                <td>
                                    @Html.Raw(
                                    question.Descendants("RefText").FirstOrDefault()?.Value
                                    )
                                </td>
                                <td></td>
                            </tr>
                        }
                    </tbody>
                }
            </table>
                <h5>Remarks - @domain.Attribute("title").Value</h5>
                <p class="mb-5">
                    @GetDomainRemark(@domain)
                </p>
        }
}

</div>

<style>
    table {
        page-break-inside: auto;
        width: calc(100% - 2em);
        margin: 0 auto 2em auto;
        border-collapse: collapse;
    }

    tr {
        page-break-inside: avoid;
        page-break-after: auto
    }

    tr,
    td {
        padding: 10px;
        border: 1px solid #999;
        vertical-align: top;
        page-break-inside: avoid;
    }

    thead {
        display: table-header-group
    }

    footer {
        z-index: 1000;
    }

    tfoot {
        display: table-footer-group
    }
</style>