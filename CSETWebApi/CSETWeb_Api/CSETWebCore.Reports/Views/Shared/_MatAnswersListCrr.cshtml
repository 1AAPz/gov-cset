@using CSETWebCore.Model.Maturity
@model IEnumerable<MatRelevantAnswers>

@{
    var keyToCategory = new Dictionary<string, string>()
{
        {"AM", "Asset Management" },
        {"CM", "Controls Management" },
        {"CCM", "Configuration and Change Management" },
        {"VM", "Vulnerability Management" },
        {"IM", "Incident Management" },
        {"SCM", "Service Continuity Management" },
        {"RM", "Risk Management" },
        {"EDM", "External Dependencies Management" },
        {"TA", "Training and Awareness" },
        {"SA", "Situational Awareness" }
    };

    var byCat = new Dictionary<string, List<MatRelevantAnswers>>();
    foreach (var ans in Model)
    {
        var cat = ans.Mat.Question_Title.Split(':')[0];
        if (!byCat.ContainsKey(cat))
        {
            byCat.Add(cat, new List<MatRelevantAnswers>());
        }
        byCat[cat].Add(ans);
    }
    foreach (var key in byCat.Keys)
    {
        byCat[key] = byCat[key]
            .OrderBy(ans => ans.Mat.Question_Title.Split('-')[0])
            .ThenBy(ans => ans.Mat.Question_Text)
            .ToList();
    }

    async Task RenderCategory(string key)
    {
        if (!byCat.ContainsKey(key))
        {
            return;
        }
        <div class="row text-start border-1 border-bottom ps-0 mt-3 mb-3 pb-1">
            <div class="col ps-0">
                <h2>@(keyToCategory.ContainsKey(key) ? keyToCategory[key] : key)</h2>
            </div>
        </div>
        foreach (var ans in byCat[key])
        {
            await Html.RenderPartialAsync("_MatAnswerFull", ans);
        }
    }

    await RenderCategory("AM");
    await RenderCategory("CM");
    await RenderCategory("CCM");
    await RenderCategory("VM");
    await RenderCategory("IM");
    await RenderCategory("SCM");
    await RenderCategory("RM");
    await RenderCategory("EDM");
    await RenderCategory("TA");
    await RenderCategory("SA");
}