@using CSETWebCore.Helpers.ReportWidgets;
@using System.Xml.Linq;
@model CrrViewModel

<link rel="stylesheet" href="@(TempData["links"]+"/lib/bootstrap/css/bootstrap.min.css")" />
<link rel="stylesheet" href="@(TempData["links"]+"/css/site.css")" />

@{

    var XDocument = Model.CRRScores.XDoc;
    async void RenderMil1()
    {

        <div class="row tinytext gx-0" style="padding: 0; height: auto;">
            <div style="padding: 0.1rem; width: 50px;">
                <p>Total number of practices performed</p>
            </div>
            <div style="padding: 0.1rem; width: 50px;">
                <p>Total number of practices incompletely performed</p>
            </div>
            <div style="padding: 0.1rem; width: 50px;">
                <p>Total number of practices not performed</p>
            </div>
            <div class="col-5" style="padding: 0 1rem;">
                <h3 class="depiction-title">CRR MIL-1 Performance Summary</h3>
            </div>
            <div class="col" style="padding: 0;">
                @{
                    var legend = new MIL1PerformanceSummaryLegend();
                }
                @Html.Raw(legend.ToString())
            </div>
        </div>

        <div class="row">
            <div class="col">
                @{
                    var totalDistribution = Model.CRRScores.MIL1FullAnswerDistrib();
                    var totalBarChartInput = new BarChartInput() { Height = 65, Width = 150 };
                    totalBarChartInput.AnswerCounts = new List<int>
                            { totalDistribution.Green, totalDistribution.Yellow, totalDistribution.Red };
                    var totalBarChart = new ScoreBarChart(totalBarChartInput);

                }
                @Html.Raw(totalBarChart.ToString())
            </div>
        </div>
        <div class="row">
            <div class="col">
                <h5 class="appendix-label">CRR MIL-1 Summary</h5>
            </div>
        </div>

        <div class="row" style="border-top: solid 1.5px black;">
            <div style="width: 20%">
                <p style="font-size:0.8em; margin: 0;">DOMAIN SUMMARY</p>
            </div>
            <div style="width: 80%">
                <p style="font-size:0.8em; margin: 0;">MIL-1 PRACTICE LEVEL PERFORMANCE</p>
            </div>
        </div>


        foreach (XElement domain in XDocument.Root.Elements())
        {
            var domainScores = Model.CRRScores.MIL1DomainAnswerDistrib(domain.Attribute("abbreviation").Value);
            var barChartInput = new BarChartInput() { Height = 45, Width = 100 };
            barChartInput.IncludePercentFirstBar = true;
            barChartInput.AnswerCounts = new List<int> { domainScores.Green, domainScores.Yellow, domainScores.Red };
            var barChart = new ScoreBarChart(barChartInput);


            <div class="row" style="border-top: 1px solid black;">
                <div class="col-1" style="width: 15%; padding: 0 0.25rem 0 0;">
                    <div class="row">
                        <p style="font-size: 0.75rem; font-weight: bold;">
                            @domain.Attribute("title").Value.Split('(')[0].Trim()
                        </p>
                    </div>
                    <div class="row">
                        @Html.Raw(barChart.ToString())
                    </div>
                </div>

                <div class="col-1" style="width: 85%; padding: 0;">
                    @{

                        var goals = domain.Descendants("Mil").FirstOrDefault().Descendants("Goal");

                        // This explicit iterator is used to style each goal block, except the last one
                        int i = 1;
                        foreach (XElement goal in goals)
                        {
                            var goalScores = Model.CRRScores.GoalAnswerDistrib(domain.Attribute("abbreviation").Value, goal.Attribute("abbreviation").Value);
                            var stackedBarChartInput = new BarChartInput() { Height = 10, Width = 265 };
                            stackedBarChartInput.AnswerCounts = new List<int> { goalScores.Green, goalScores.Yellow, goalScores.Red };

                            var stackedChart = new ScoreStackedBarChart(stackedBarChartInput);


                            if (i == goals.Count())
                            {
                                <div class="row gx-1 goalrow">
                                    <div class="col-1" style="font-size: 8px; padding: 0; max-width: 35px;"><p class="goalrow-text"><b>@goal.Attribute("title").Value.Split('-').FirstOrDefault() -</b></p></div>
                                    <div class="col-6" style="font-size: 8px; padding: 0"><p class="goalrow-text">@stringSplitter(goal.Attribute("title").Value)</p></div>
                                    <div class="col-5" style="padding: 0.25rem;"><p class="goalrow-text">@Html.Raw(stackedChart.ToString())</p></div>
                                </div>

                                continue;
                            }

                            <div class="row gx-1 goalrow" style="border-bottom: solid 1px black;">
                                <div class="col-1" style="font-size: 8px; padding: 0; max-width: 35px;"><p class="goalrow-text"><b>@goal.Attribute("title").Value.Split('-').FirstOrDefault() -</b></p></div>
                                <div class="col-6" style="font-size: 8px; padding: 0"><p class="goalrow-text">@stringSplitter(goal.Attribute("title").Value)</p></div>
                                <div class="col-5" style="padding: 0.25rem;"><p class="goalrow-text">@Html.Raw(stackedChart.ToString())</p></div>
                            </div>

                            i++;

                            continue;
                        }

                    }

                </div>
            </div>
        }
    }

    // This function splits strings like
    // "Goal 6 - Post-incident lessons learned are translated into improvement strategies."
    // and
    // "Goal 3-Risks are identified."
    string stringSplitter(string str)
    {
        try
        {
            return str.Split(" - ")[1];
        }
        catch
        {
            return str.Split("-")[1];
        }
    }
}

<div class="container-fluid">
    @{ RenderMil1(); }
</div>


<style>

    .depiction-title {
        line-height: 90%;
        margin: 0;
    }

    .goalrow {
        padding: 0 0 0 0.25rem;
        height: auto;
        display: flex;
    }

    .goalrow-text {
        margin: 0;
    }

    .tinytext {
        font-size: 6px;
    }

    p {
        margin: 0;
        padding: 0;
    }

    .appendex-left {
        width: 22%;
    }

    .appendix-right {
        width: 78%;
    }

    .appendix-label {
        font-size: 0.75rem;
        font-weight: bold;
        margin: 0;
    }
</style>
