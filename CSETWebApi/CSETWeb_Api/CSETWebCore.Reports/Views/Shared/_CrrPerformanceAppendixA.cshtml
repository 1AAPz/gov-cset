@using CSETWebCore.Reports.Models
@using CSETWebCore.Model.Edm
@using CSETWebCore.Helpers.ReportWidgets
@using System.Text.RegularExpressions 
@model CrrViewModel

<style>
    .legend-color-box {
        display: inline-block;
        width: 1em;
        height: 1em;
    }

    .tinytext {
        font-size: 0.5em;
    }

    .divided-box {
        border-top: 1px solid black;
    }

    .p-tight {
        margin: 0px;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-1" style="width:22%;">
            <div class="row tinytext gx-0">
                <div class="col-4">
                    <p class="p-stack">Total number of practices performed</p>
                </div>
                <div class="col-4">
                    <p class="p-stack">Total number of practices incompletely performed</p>
                </div>
                <div class="col-4">
                    <p class="p-stack">Total number of practices not performed</p>
                </div>
            </div>
            <div class="row">
                @{
                // Adding the FullAnswerDistrib is technically less efficient, as we could
                // gather all variables ahead of time one domain at a time, and just keep a sum
                // to calculate this. It's much easier for testing purposes though, and is probably
                // a useful function to keep.
                var qCounts = Model.CRRScores.FullAnswerDistrib();
                var barChartInput = new BarChartInput() { Height = 60, Width = 120 };
                barChartInput.AnswerCounts = new List<int>
                    { qCounts.Green, qCounts.Yellow, qCounts.Red };
                    var barChart = new ScoreBarChart(barChartInput);
                    }
                    @Html.Raw(barChart.ToString())
            </div>
            <div class="row">
                <h5>CRR Summary</h5>
            </div>
        </div>
        <div class="col-1" style="width:78%;">
            <div class="row">
                <div class="col-5">
                    <h2>CRR Performance</h2>
                </div>
                <div class="col-1">
                    <p class="append">Legend</p>
                </div>
                <div class="col-2 tinytext">
                    <p class="p-tight"><span class="legend-color-box green-score"></span>= Performed</p>
                    <p class="p-tight"><span class="legend-color-box yellow-score"></span>= Incompletely Performed</p>
                    <p class="p-tight"><span class="legend-color-box red-score"></span>= Not Performed</p>
                </div>
                <div class="col-2 tinytext">
                    <p class="p-tight">Q1 = Question Number</p>
                    <p class="p-tight">1P = Question Number, People Asset</p>
                    <p class="p-tight">1I = Question Number, Information Asset</p>
                </div>
                <div class="col-2 tinytext">
                    <p class="p-tight">1T = Question Number, Technology Asset</p>
                    <p class="p-tight">1F = Question Number, Facilities Asset</p>
                </div>
            </div>
            <div class="row tinytext divided-box">
                <div class="col-6">
                    <h6>MIL-1 Performed</h6>
                    <p class="p-stack">Domain practices are being performed.</p>
                </div>
                <div class="col-1" style="width: 12.5%;">
                    <h6>MIL-2 Planned</h6>
                    <p class="p-stack">Domain practices are supported by planning, policy, stakeholders, and standards.</p>
                </div>
                <div class="col-1" style="width: 12.5%;">
                    <h6>MIL-3 Managed</h6>
                    <p class="p-stack">Domain practices are supported by governance and adequate resources.</p>
                </div>
                <div class="col-1" style="width: 12.5%;">
                    <h6>MIL-4 Measured</h6>
                    <p class="p-stack">Domain practices are supported by measurement, monitoring, and executive oversight.</p>
                </div>
                <div class="col-1" style="width: 12.5%;">
                    <h6>MIL-5 Defined</h6>
                    <p class="p-stack">Domain practices are supported by enterprise standardization and analysis of lessons learned.</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row" style="border-top: solid 1px black; border-bottom: solid 1px black;">
        <div class="col">
            <h3 style="">DOMAIN SUMMARY</h3>
        </div>
        <div class="col">
            <span>MIL-1 PRACTICE LEVEL PERFORMANCE SUMMARY</span>
        </div>
    </div>

    @{
        string getScaledHeight(string height, double scale)
        {
            var findNumerics = new Regex(@"[0-9\.]+");
            var matches = findNumerics.Match(height);
            double currentHeight = double.Parse(matches.Value) * scale;
            string scaledHeight = findNumerics.Replace(height, Math.Floor(currentHeight).ToString());
            return scaledHeight;
        }

        // Goes through each domain in the models XDoc
        foreach (var domain in Model.CRRScores.XDoc.Root.Elements())
        {
            var gyrScores = Model.CRRScores.DomainAnswerDistrib(domain.Attribute("abbreviation").Value);
            barChartInput.AnswerCounts = new List<int> { gyrScores.Green, gyrScores.Yellow, gyrScores.Red };
            var barChartt = new ScoreBarChart(barChartInput);

            <div class="row divided-box" style="padding-top:5px;">
                <div class="col-1" style="width:22%;">
                    <div class="row">
                        <h5 style="font-size:1em; font-weight:bold;">
                            @{
                            var titleStripped = domain.Attribute("title").Value.Split('(')[0].Trim();
                            }
                            @titleStripped
                        </h5>
                    </div>
                    <div class="row">
                        @Html.Raw(barChartt.ToString())
                    </div>
                </div>
                <div class="col-1" style="width:78%;">
                    <div class="row gx-1">
                        <div class="col-6">
                            @{
                                var milSvg = new MilHeatMap(domain.Elements().ElementAt(0), true);
                                milSvg.DisableAspectRatio();
                                milSvg.Width = "300px";

                                milSvg.Height = getScaledHeight(milSvg.Height, 0.5);
                            }
                            @Html.Raw(milSvg.ToString())
                        </div>
                        @{
                        foreach (var mil in domain.Elements().ToList().GetRange(1, domain.Elements().Count() - 1))
                        {
                            <div class="col-1" style="width: 12.5%;">
                                @{
                                    milSvg = new MilHeatMap(mil, true);
                                    milSvg.DisableAspectRatio();
                                    milSvg.Width = "75px";

                                    milSvg.Height = getScaledHeight(milSvg.Height, 0.5);
                                }
                                @Html.Raw(milSvg.ToString())
                            </div>
                        }
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>
