@using CSETWebCore.Reports.Models
@using CSETWebCore.Model.Edm
@using CSETWebCore.Helpers.ReportWidgets 
@model CrrViewModel

<style>
    .legend-color-box {
        display: inline-block;
        width: 1em;
        height: 1em;
    }

    .tinytext {
        font-size: 0.5em;
    }

    .divided-box {
        border-top: 2px solid black;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col-3">
            <div class="row tinytext">
                <div class="col-4">
                    <p>Total number of practices performed</p>
                </div>
                <div class="col-4">
                    <p>Total number of practices incompletely performed</p>
                </div>
                <div class="col-4">
                    <p>Total number of practices not performed</p>
                </div>
            </div>
            <div class="row">
                @{
                    // Adding the FullAnswerDistrib is technically less efficient, as we could
                    // gather all variables ahead of time one domain at a time, and just keep a sum
                    // to calculate this. It's much easier for testing purposes though, and is probably
                    // a useful function to keep.
                    var qCounts = Model.CRRScores.FullAnswerDistrib();
                    var barChartInput = new BarChartInput() { Height = 100, Width = 180 };
                    barChartInput.AnswerCounts = new List<int> { qCounts.Green, qCounts.Yellow, qCounts.Red };
                    var barChart = new ScoreBarChart(barChartInput);
                }
                @Html.Raw(barChart.ToString())
            </div>
            <div class="row">
                <h5>CRR Summary</h5>
            </div>
        </div>
        <div class="col-9">
            <div class="row">
                <div class="col-5">
                    <h2>CRR Performance</h2>
                </div>
                <div class="col-1">
                    <p class="append">Legend</p>
                </div>
                <div class="col-2 tinytext">
                    <p><span class="legend-color-box green-score"></span>= Performed</p>
                    <p><span class="legend-color-box yellow-score"></span>= Incompletely Performed</p>
                    <p><span class="legend-color-box red-score"></span>= Not Performed</p>
                </div>
                <div class="col-2 tinytext">
                    <p>Q1 = Question Number</p>
                    <p>1P = Question Number, People Asset</p>
                    <p>1I = Question Number, Information Asset</p>
                </div>
                <div class="col-2 tinytext">
                    <p>1T = Question Number, Technology Asset</p>
                    <p>1F = Question Number, Facilities Asset</p>
                </div>
            </div>
            <div class="row tinytext divided-box">
                <div class="col-6">
                    <h6>MIL-1 Performed</h6>
                    <p>Domain practices are being performed.</p>
                </div>
                <div class="col-1" style="width: 12.5%;">
                    <h6>MIL-2 Planned</h6>
                    <p>Domain practices are supported by planning, policy, stakeholders, and standards.</p>
                </div>
                <div class="col-1" style="width: 12.5%;">
                    <h6>MIL-3 Managed</h6>
                    <p>Domain practices are supported by governance and adequate resources.</p>
                </div>
                <div class="col-1" style="width: 12.5%;">
                    <h6>MIL-4 Measured</h6>
                    <p>Domain practices are supported by measurement, monitoring, and executive oversight.</p>
                </div>
                <div class="col-1" style="width: 12.5%;">
                    <h6>MIL-5 Defined</h6>
                    <p>Domain practices are supported by enterprise standardization and analysis of lessons learned.</p>
                </div>
            </div>
        </div>
    </div>
    <div class="row" style="border-top: solid 1px black; border-bottom: solid 1px black;">
        <div class="col">
            <h3 style="">DOMAIN SUMMARY</h3>
        </div>
        <div class="col">
            <span>MIL-1 PRACTICE LEVEL PERFORMANCE SUMMARY</span>
        </div>
    </div>
    @{ 
        //TODO: Make this loop a helper function? It's used in _CrrMil1PerformanceSummary.cshtml as well.
        foreach (var domain in Model.CRRScores.XDoc.Root.Elements())
        {
            //TODO: Move this all to a helper function to reduce code duplication
            var domainScores = Model.CRRScores.DomainAnswerDistrib(domain.Attribute("abbreviation").Value);
            var localInput = new BarChartInput() { Width = 180, Height = 100 };
            localInput.AnswerCounts = new List<int> { domainScores.Green, domainScores.Yellow, domainScores.Red };
            var localBarChart = new ScoreBarChart(localInput);

            <div class="row divided-box">
                <div class="col-3">
                    <div class="row">
                        <h5>
                            @domain.Attribute("title").Value
                        </h5>
                    </div>
                    <div class="row">
                        @Html.Raw(localBarChart.ToString())
                    </div>
                </div>
                <div class="col-9">
                    <div class="row">
                        @{ 
                            foreach (var parentScore in Model.ParentScores)
                            {
                                @await Html.PartialAsync("_MilSummary", parentScore)
                            }
                        }
                    </div>
                </div>
            </div>
        }
    }
</div>
