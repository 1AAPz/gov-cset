@using CSETWebCore.Helpers.ReportWidgets;
@using System.Xml.Linq;
@model CrrViewModel


@{
    var XDocument = Model.CRRScores.XDoc;
    async void RenderSummary()
    {
        <div class="row domain-text">
            <div class="col-1">
                <b>Domain Summary</b>
            </div>
            <div class="col-3">
                <b>MIL-1 Performed</b>
                <br />
                Domain Practices are being performed
            </div>
            <div class="col-2">
                <b>MIL-2 Planned</b>
                <br />
                Domain practices are supported by planning, policy, stakeholders, and standards.
            </div>
            <div class="col-2">
                <b>MIL-3 Managed</b>
                <br />
                Domain practices are supported by governance and adequate resources.
            </div>
            <div class="col-2">
                <b>MIL-4 Measured</b>
                <br />
                Domain practices are supported by measurement, monitoring, and executive oversight.
            </div>
            <div class="col-2">
                <b>MIL-5 Defined</b>
                <br />
                Domain practices are supported by enterprise standardization and analysis of lessons learned.
            </div>
        </div>
        foreach (XElement domain in XDocument.Root.Elements())
        {

            <div class="row domain">
                    <div class="col-1 domain-label">@domain.Attribute("title").Value</div>
                @{

                    // MIL 1 is entered into a Goals Heatmap
                    XElement mil1 = domain.Descendants("Mil").FirstOrDefault(el => el.Attribute("label") != null && el.Attribute("label").Value == "MIL-1");
                    var goalsHeatMap = new GoalsHeatMap(mil1);
                    <div class="col-3">
                        @Html.Raw(goalsHeatMap.ToString())
                    </div>
                    
                    // All other MILs are entered into a Questions Heatmap (the MIL has the correct coloring)
                    foreach (XElement mil in domain.Descendants("Mil").Where(el => el.Attribute("label") != null && el.Attribute("label").Value != "MIL-1"))
                    {
                        <div class="col-2">
                            @{
                                var questionsHeatMap = new QuestionsHeatMap(mil);
                            }
                            @Html.Raw(questionsHeatMap.ToString())
                        </div>
                    }
                }

                </div>

        }
    }
}

<div class="container-fluid landscape" style="font-family: Verdana, sans-serif;">
    @{ RenderSummary(); }
</div>

<style>
    .landscape {
        /*transform: rotate(-90deg)*/
    }

    .domain-label {
        font-size: 0.5rem;
        font-weight: bold;
    }

    .domain-text {
        font-size: 0.5rem;
    }

    .domain {
        padding-top: 5px;
        border-top: 1px solid black;
    }
</style>