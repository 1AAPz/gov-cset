@using CSETWebCore.Helpers.ReportWidgets;
@using System.Xml.Linq;
@model CrrViewModel

<link rel="stylesheet" href="wwwroot/lib/bootstrap/css/bootstrap.min.css" />
<link rel="stylesheet" href="wwwroot/css/site.css" />

@{
    string AnswerLabel(string ans)
    {
        switch (ans)
        {
            case "N":
                return "No";
            case "Y":
                return "Yes";
            case "I":
                return "Incomplete";
            case "U":
            case "":
                return "Unanswered";
        }

        return ans;
    }

    string AnswerCellClass(XElement q)
    {
        var answer = q.Attribute("answer").Value;

        switch (answer)
        {
            case "Y":
                return WidgetResources.ColorMap["green"];
            case "I":
                return WidgetResources.ColorMap["yellow"];
            case "N":
                return WidgetResources.ColorMap["red"];
            case "U":
                return WidgetResources.ColorMap["unanswered-gray"];
        }

        return WidgetResources.ColorMap["placeholder-gray"];
    }

    string AnswerTextColor(XElement q)
    {
        var answer = q.Attribute("answer").Value;

        switch (answer)
        {
            case "Y":
            case "N":
            case "U":
                return "#fff";
            case "I":
                return "#000";
        }

        return "#000";
    }


    string GetQuestionNumber(XElement question)
    {
        var text = question.Attribute("displaynumber").Value.Trim();
        int dot = text.LastIndexOf(".");
        if (dot < 0)
        {
            return "Q";
        }
        return text.Substring(dot + 1);
    }


    string GetDomainRemark(XElement domain)
    {
        var remark = domain.Attribute("remark");
        if (remark == null)
        {
            return "No remarks have been entered";
        }

        if (remark.Value.Trim().Length > 0)
        {
            return remark.Value;
        }

        return "No remarks have been entered";
    }


    /// Returns the questions that are not child questions
    List<XElement> ParentQuestions(IEnumerable<XElement> q)
    {
        var questions = new List<XElement>();
        questions.AddRange(q.Where(x => x.Attribute("parentquestionid").Value == "").ToList());

        return questions;
    }

}

<div id="toc-domain-IM" class="domain-detail" style="width: 100%">


    @{
        var xDoc = Model.CRRScores.XDoc;

        var domain = xDoc.Descendants("Domain").FirstOrDefault(el => el.Attribute("abbreviation").Value == "IM");

        <div style="padding-left: 30px; padding-bottom: 25px;">
            <h3 class="depiction-title">5 @domain.Attribute("title").Value</h3>
        </div>

        <div class="widget text-nowrap">
            @{
                foreach (XElement mil in domain.Elements())
                {
                    var milSvg = new MilHeatMap(mil, true, false);
                    milSvg.Scale(1.5);
                    @Html.Raw(milSvg.ToString())
                }
            }
        </div>
        <table class="w-100 cset-table">
            <tbody>
                @foreach (XElement goal in domain.Descendants("Goal"))
                {
                    <tr>
                        <td colspan="3" style="text-align: left;">
                            <div class="mb-3 font-weight-bold">
                                <p>@goal.Attribute("title").Value</p>
                            </div>
                            <div>
                                <p>@goal.Attribute("description")?.Value</p>
                            </div>
                        </td>
                    </tr>

                    @foreach (XElement question in goal.Elements())
                    {
                        @if (question.Attribute("placeholder-p")?.Value == "true")
                        {
                            continue;
                        }

                        string indent = null;
                        @if (question.Attribute("isparentquestion").Value == "false"
                                   && question.Attribute("parentquestionid").Value != "")
                        {
                            indent = "padding-left: 3rem !important";
                        }

                        <tr>
                            <td colspan="2" style="text-align: left; @indent">
                                <p>@Html.Raw(question.Attribute("questiontext")?.Value)</p>
                            </td>
                            @if (question.Attribute("isparentquestion").Value == "false")
                            {
                                <td style="background-color: @AnswerCellClass(question); color: @AnswerTextColor(question)">
                                    <div style="text-align: center; width: 7rem">
                                        <p>@AnswerLabel(question.Attribute("answer").Value)</p>
                                    </div>
                                </td>
                            }
                            @if (question.Attribute("isparentquestion").Value == "true")
                            {
                                <td>
                                    <div style="width: 7rem"></div>
                                </td>
                            }
                        </tr>
                    }

                    <tr>
                        <td colspan="3" class="font-weight-bold">Option(s) for Consideration:</td>
                    </tr>
                    @foreach (XElement question in ParentQuestions(goal.Elements("Question")))
                    {
                        <tr>
                            <td><p>@GetQuestionNumber(question)</p></td>
                            <td style="text-align: left;">
                                @Html.Raw(question.Descendants("RefText").FirstOrDefault()?.Value)
                            </td>
                            <td></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <h5>Remarks - @domain.Attribute("title").Value</h5>
        <p class="mb-5">
            @GetDomainRemark(@domain)
        </p>
    }

</div>

<style>
    table {
        page-break-inside: auto;
        width: calc(100% - 2em);
        margin: 0 auto 2em auto;
        border-collapse: collapse;
    }

    tr {
        padding: 10px;
        border: 1px solid #999;
        vertical-align: top;
        page-break-inside: avoid;
        page-break-after: auto
    }

    td {
        padding: 10px;
        border: 1px solid #999;
        vertical-align: top;
        page-break-inside: avoid;
    }

    thead {
        display: table-header-group
    }

    tfoot {
        display: table-footer-group
    }

    .p1 {
        /*all: unset; */
    }
</style>